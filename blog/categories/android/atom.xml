<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Debug Release]]></title>
  <link href="http://deepak-kapoor.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://deepak-kapoor.github.io/"/>
  <updated>2013-08-08T14:39:15+10:00</updated>
  <id>http://deepak-kapoor.github.io/</id>
  <author>
    <name><![CDATA[Deepak Kapoor]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android - ExpandableListView Tutorial]]></title>
    <link href="http://deepak-kapoor.github.io/2013/07/31/android-expandablelistview-tutorial/"/>
    <updated>2013-07-31T00:00:00+10:00</updated>
    <id>http://deepak-kapoor.github.io/2013/07/31/android-expandablelistview-tutorial</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>


<p>In this tutorial I will show you how to use <strong>ExpandableListView</strong> widget in your Android app. ExpandableListView widget is used to display hierarchical data which is two levels deep. If your hierarchy is more than two levels then you should look at options other than ExpandableListView. Now let's get started.</p>




<p>We will develop an app which displays a bunch of countries with some of their cities. When a user taps the name of a country, the widget expands to show cities. Below is a screenshot of the app.</p>


<p><img style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2013/07/ExpandableList2.png" width="640" height="737" /></p>

<h3>Setup</h3>


<p>First thing we need is a class to hold information about countries and cities. Let's create a class called Country.</p>




<pre class="prettyprint" lang="java">
public class Country {
  private String Name;
  private List<String> Cities;

  public Country(String name, List<String> cities) {
    Name = name;
    Cities = cities;
  }

  public String getName() {
    return Name;
  }

  public List<String> getCities() {
    return Cities;
  }
}
</pre>




<p>We will later populate a list of countries in our activity.</p>




<h3>Adapter</h3>




<p>Like <a href="http://www.debugrelease.com/2013/06/19/android-listview-tutorial/">ListView</a> widget, ExpandableListView also works with an adapter. Android SDK provides a BaseExpandableListAdapter which we can use for our simple example. We
will provide a constructor which takes a Context and a List of countries as arguments.</p>




<pre class="prettyprint" lang="java">
public CountryAdapter(Context context, List<Country> countries) {
  this.countries = countries;
  inflater = LayoutInflater.from(context);
}
</pre>




<p>The constructor will set the private member countries which will be later used by overriden methods in our adapter. We will also set our private Inflater object by calling LayoutInflater.from() method.</p>




<p>Next come the overrides which do most of the work. Before we get into the methods, let's understand how ExpandableListView works. The concept is very simple, you have groups which in our case are countries. Within each group you have children which are cities in our example. And it is just that simple. Let's look at some of the methods we will override in our adapter.</p>




<pre class="prettyprint" lang="java">
@Override
public int getGroupCount() {
  return countries.size();
}
</pre>




<p><strong>getChildrenCount</strong> returns the count of children. This method accepts one argument which is groupPosition. What we return here is the count of children for a particular group. In our example we will return the count of cities for a country.</p>




<pre class="prettyprint" lang="java">
@Override
public int getChildrenCount(int groupPosition) {
  return countries.get(groupPosition).getCities().size();
}
</pre>




<p><strong>hasStableIds</strong> method is used to inform if the id values for our objects will change during the course of our app.</p>




<p><strong>getGroupView</strong> is used to return a view which will be drawn for each group item. In this case we are using the simple_expandable_list_item_1 layout which is a part of the SDK.</p>




<pre class="prettyprint" lang="java">
@Override
public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {
  if (convertView == null) {
    convertView = inflater.inflate(R.layout.simple_expandable_list_item_1, parent, false);
  }

  ((TextView) convertView).setText(getGroup(groupPosition).toString());
  return convertView;
}
</pre>




<p>Similarly <strong>getChildView</strong> returns the view used by each child item.</p>




<p>Some of the other methods such as getGroup, getChild, getGroupId and
getChildId are fairly intuitive.</p>




<p>Below is the entire code for our adapter.</p>




<pre class="prettyprint" lang="java">
package com.debugrelease.android.ExpandableListViewTutorial;

import android.R;
import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseExpandableListAdapter;
import android.widget.TextView;

import java.util.List;

public class CountryAdapter extends BaseExpandableListAdapter {
  private List<Country> countries;
  private LayoutInflater inflater;

  public CountryAdapter(Context context, List<Country> countries) {
    this.countries = countries;
    inflater = LayoutInflater.from(context);
  }

  @Override
  public int getGroupCount() {
    return countries.size();
  }

  @Override
  public int getChildrenCount(int groupPosition) {
    return countries.get(groupPosition).getCities().size();
  }

  @Override
  public Object getGroup(int groupPosition) {
    return countries.get(groupPosition).getName();
  }

  @Override
  public Object getChild(int groupPosition, int childPosition) {
    return countries.get(groupPosition).getCities().get(childPosition);
  }

  @Override
  public long getGroupId(int groupPosition) {
    return groupPosition;
  }

  @Override
  public long getChildId(int groupPosition, int childPosition) {
    return childPosition;
  }

  @Override
  public boolean hasStableIds() {
    return true;
  }

  @Override
  public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {
    if (convertView == null) {
      convertView = inflater.inflate(R.layout.simple_expandable_list_item_1, parent, false);
    }

    ((TextView) convertView).setText(getGroup(groupPosition).toString());
    return convertView;
  }

  @Override
  public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent) {
    if(convertView == null) {
      convertView = inflater.inflate(R.layout.simple_list_item_1, parent, false);
    }

    ((TextView)convertView).setText(getChild(groupPosition,childPosition).toString());
    return convertView;
  }

  @Override
  public boolean isChildSelectable(int i, int i2) {
    return false;
  }
}
</pre>




<h3>Main Activity</h3>


<p>The layout for our MainActivity will include an ExpandableListView within a <a href="http://www.debugrelease.com/2013/06/11/android-linear-layout-example/">LinearLayout</a>.</p>




<pre class="prettyprint">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
  package=&quot;com.debugrelease.android.ExpandableListViewTutorial&quot;
  android:versionCode=&quot;1&quot;
  android:versionName=&quot;1.0&quot;&gt;
    &lt;uses-sdk android:minSdkVersion=&quot;15&quot;/&gt;
    &lt;application android:label=&quot;@string/app_name&quot; android:icon=&quot;@drawable/ic_launcher&quot;&gt;
        &lt;activity android:name=&quot;MainActivity&quot;
          android:label=&quot;@string/app_name&quot;&gt;
    &lt;intent-filter&gt;
        &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;
        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;
    &lt;/intent-filter&gt;
        &lt;/activity&gt;
    &lt;/application&gt;
&lt;/manifest&gt;
</pre>




<p>In our MainActivity class we will tie everything together. In this class we will load up a list of countries and in the <strong>onCreate</strong> method, we will set the adapter for our ExpandableListView. Below is the code for MainActivity.java</p>




<pre class="prettyprint" lang="java">
package com.debugrelease.android.ExpandableListViewTutorial;

import android.app.Activity;
import android.os.Bundle;
import android.widget.ExpandableListView;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class MainActivity extends Activity {
  private static List<Country> Countries;
  private ExpandableListView expandableListView;
  private CountryAdapter adapter;

  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    LoadCountries();
    expandableListView = (ExpandableListView) findViewById(R.id.expandableListView);
    adapter = new CountryAdapter(this, Countries);
    expandableListView.setAdapter(adapter);
  }

  private void LoadCountries() {
    Countries = new ArrayList<Country>();

    ArrayList<String> citiesAustralia = new ArrayList<String>(
        Arrays.asList("Brisbane", "Hobart", "Melbourne", "Sydney"));
    Countries.add(new Country("Australia", citiesAustralia));

    ArrayList<String> citiesChina = new ArrayList<String>(
        Arrays.asList("Beijing", "Chuzhou", "Dongguan", "Shangzhou"));
    Countries.add(new Country("China", citiesChina));

    ArrayList<String> citiesIndia = new ArrayList<String>(
        Arrays.asList("Bombay", "Calcutta", "Delhi", "Madras"));
    Countries.add(new Country("India", citiesIndia));

    ArrayList<String> citiesNewZealand = new ArrayList<String>(
        Arrays.asList("Auckland", "Christchurch", "Wellington"));
    Countries.add(new Country("New Zealand", citiesNewZealand));

    ArrayList<String> citiesRussia = new ArrayList<String>(
        Arrays.asList("Moscow", "Kursk", "Novosibirsk", "Saint Petersburg"));
    Countries.add(new Country("Russia", citiesRussia));
  }
}

</pre>




<h3>Conclusion</h3>


<p>Like most of the other widgets, ExpandableListView is also very simple to work with. In this tutorial we saw an example which displays two levels deep hierarchical data of countries and cities using ExpandableListView. I hope you enjoyed it. Please leave a comment if you'd like to discuss something or have any questions.</p>


<p>The code for this tutorial can be found in my <a href="http://bit.ly/debrel-android-samples">Github repository</a>. Within the repository look for ExpandableListViewTutorial folder.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android   - ListView tutorial with images and text]]></title>
    <link href="http://deepak-kapoor.github.io/2013/06/24/android-listview-tutorial-with-images-and-text/"/>
    <updated>2013-06-24T00:00:00+10:00</updated>
    <id>http://deepak-kapoor.github.io/2013/06/24/android-listview-tutorial-with-images-and-text</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>


<p>In this post I will show you how to use a ListView widget to display both images and text. This is a common pattern used by many apps. If you are not familiar with ListView and would like a basic tutorial then please visit <a href="http://www.debugrelease.com/2013/06/19/android-listview-tutorial/">this link</a>.</p>


<p>For this tutorial, we will build an app which displays a bunch of items along with an image. I will walk you through the process which will involve creating custom layouts for each item in ListView and creating a custom adapter.</p>


<p>Here is a screenshot of what we will build.</p>


<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2013/06/image7.png" width="480" height="756" /></p>

<h3>Project structure</h3>


<p>First we will create an Android Application Module in IntelliJ or an Android application if you are using Eclipse. I use <a href="http://www.jetbrains.com/idea/free_java_ide.html">IntelliJ Community Edition</a> for my Android development and I suggest that you should also have a look. </p>


<p>I will name the package com.debugrelease.android.listviewwithimagesandtext</p>


<p><img title="SNAGHTML5aec1f5" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="SNAGHTML5aec1f5" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2013/06/SNAGHTML5aec1f5.png" width="635" height="204" /></p>


<p>Other than the name of package and activity name I have not made any changes. </p>


<h3>Items</h3>


<p>We need some items which we will display in the ListView. As we are also displaying images along with text, we will need some images. A good place to get some icons is <a href="http://www.androidicons.com">www.androidicons.com</a>. They also have some icons available for free and those will be enough for this tutorial. Of course you can also use any other images you like. </p>


<p>We will copy these images into the assets folder. You can also find the images in the <a href="https://github.com/deepak-kapoor/debug-release-android-samples">Github repository</a>. The project is located in ListViewWithImagesAndText folder. </p>


<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2013/06/image8.png" width="460" height="258" /></p>


<h3>Model</h3>


<p>We will create a new class which will act as the model for our list items. Let’s call this class Item. Here is the code.</p>




<pre class="prettyprint lang-java" >package com.debugrelease.android.listviewwithimagesandtext;

public class Item {

    public int Id;
    public String IconFile;
    public String Name;

    public Item(int id, String iconFile, String name) {

        Id = id;
        IconFile = iconFile;
        Name = name;

    }

}
</pre>


<p></p>

<p>We will also create a Model class which will provide us with an ArrayList of our items. Model class also has a method GetById which is used by the adapter. Here is the code for Model class.</p>




<pre class="prettyprint lang-java" >package com.debugrelease.android.listviewwithimagesandtext;

import java.util.ArrayList;

public class Model {

    public static ArrayList&lt;Item&gt; Items;

    public static void LoadModel() {

        Items = new ArrayList&lt;Item&gt;();
        Items.add(new Item(1, "ic_action_alarm_2.png", "Alarm"));
        Items.add(new Item(2, "ic_action_calculator.png", "Calculator"));
        Items.add(new Item(3, "ic_action_google_play.png", "Play"));
        Items.add(new Item(4, "ic_action_line_chart.png", "Line Chart"));
        Items.add(new Item(5, "ic_action_location_2.png", "Location"));
        Items.add(new Item(6, "ic_action_news.png", "News"));
        Items.add(new Item(7, "ic_action_stamp.png", "Stamp"));

    }

    public static Item GetbyId(int id){

        for(Item item : Items) {
            if (item.Id == id) {
                return item;
            }
        }
        return null;
    }

}
</pre>


<p></p>

<h3>Layouts</h3>


<p>In the main.xml which is the layout used by MainActivity, we will place a ListView widget and set it’s layout_width and layout_height to wrap_content. ListView will also have a id set because we’ll need to reference it in code. Here are contents of main.xml</p>




<pre class="prettyprint" >&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:orientation="vertical"
              android:layout_width="fill_parent"
              android:layout_height="fill_parent"&gt;

    &lt;ListView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:id="@+id/listView" /&gt;

&lt;/LinearLayout&gt;

</pre>


<p></p>

<p>Now this is important. If we were just displaying text then there would be no need to create a custom layout, we could just use one from sdk resources. But since we are displaying more than text, we need to create a new layout which will be the template for each item. Let’s call it row.xml</p>




<pre class="prettyprint" >&lt;?xml version="1.0" encoding="utf-8"?&gt;

&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:gravity="center_vertical"
                android:minHeight="64dp"&gt;

    &lt;ImageView
            android:id="@+id/imageView"
            android:layout_width="32dp"
            android:layout_height="32dp"
            android:layout_alignParentLeft="true"
            android:layout_marginLeft="9dp"
            android:layout_alignParentTop="true"/&gt;
    &lt;TextView
            android:layout_alignBottom="@+id/imageView"
            android:layout_width="97dp"
            android:layout_height="32dp"
            android:id="@+id/textView"
            android:layout_alignParentLeft="true"
            android:layout_marginLeft="66dp"
            android:layout_alignParentRight="true"
            android:gravity="center_vertical"/&gt;

&lt;/RelativeLayout&gt;</pre>


<p></p>

<p>See how I have placed an ImageView and a TextView within RelativeLayout. For each item one of these will be used.</p>


<h3>Adapter</h3>


<p>A ListView needs an adapter to display items. And because of our slightly custom requriement of displaying images and text, we will create our own custom adapter. This can be done by creating a class which extends ArrayAdatpter&lt;String&gt;. In this class <strong>getView</strong> method is of interest to us. Within this method we will inflate the row layout we created earlier. We will then write some code to populate both ImageView and TextView. Below is the full code for our adapter.</p>




<pre class="prettyprint lang-java" >package com.debugrelease.android.listviewwithimagesandtext;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import java.io.IOException;
import java.io.InputStream;

public class ItemAdapter extends ArrayAdapter&lt;String&gt; {

    private final Context context;
    private final String[] Ids;
    private final int rowResourceId;

    public ItemAdapter(Context context, int textViewResourceId, String[] objects) {

        super(context, textViewResourceId, objects);

        this.context = context;
        this.Ids = objects;
        this.rowResourceId = textViewResourceId;

    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {

        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);

        View rowView = inflater.inflate(rowResourceId, parent, false);
        ImageView imageView = (ImageView) rowView.findViewById(R.id.imageView);
        TextView textView = (TextView) rowView.findViewById(R.id.textView);

        int id = Integer.parseInt(Ids[position]);
        String imageFile = Model.GetbyId(id).IconFile;

        textView.setText(Model.GetbyId(id).Name);
        // get input stream
        InputStream ims = null;
        try {
            ims = context.getAssets().open(imageFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
        // load image as Drawable
        Drawable d = Drawable.createFromStream(ims, null);
        // set image to ImageView
        imageView.setImageDrawable(d);
        return rowView;

    }

}
</pre>


<p></p>

<p>What’s left now is to load the Model by calling Model.LoadModel static method, finding the ListView and assigning it the adapter. This is done in MainActivity class within overridden onCreate method. </p>




<pre class="prettyprint lang-java" >package com.debugrelease.android.listviewwithimagesandtext;

import android.app.Activity;
import android.os.Bundle;
import android.widget.ListView;

public class MainActivity extends Activity {

    ListView listView;

    @Override
    public void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        Model.LoadModel();
        listView = (ListView) findViewById(R.id.listView);
        String[] ids = new String[Model.Items.size()];
        for (int i= 0; i &lt; ids.length; i++){

            ids[i] = Integer.toString(i+1);
        }

        ItemAdapter adapter = new ItemAdapter(this,R.layout.row, ids);
        listView.setAdapter(adapter);

    }
}
</pre>


<p></p>

<h3>Conclusion</h3>


<p>In conclusion, displaying image and text in each cell of ListView is pretty simple. All you need to do is define your preferred layout for each cell, and create an adapter which will load that view for each position. </p>


<p>The code for this post and all my Android related posts is in a <a href="https://github.com/deepak-kapoor/debug-release-android-samples">Github repository</a>. For this tutorial look for ListViewWithImagesAndText folder within the repository.</p>


<p>Icons used in this post and the code are from <a href="http://www.androidicons.com/">androidicons.com</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android - Linear Layout Example]]></title>
    <link href="http://deepak-kapoor.github.io/2013/06/11/android-linear-layout-example/"/>
    <updated>2013-06-11T00:00:00+10:00</updated>
    <id>http://deepak-kapoor.github.io/2013/06/11/android-linear-layout-example</id>
    <content type="html"><![CDATA[<p>In Android Layouts are containers in which you place your widgets like buttons, images, lists etc. Two of the most useful layouts are LinearLayout and RelativeLayout. In this post I will talk about LinearLayout.</p>


<p>  <p>LinearLayout extends android.view.ViewGroup which extends android.view.View object. As the name suggests, LinearLayout is used to place widgets in a linear manner. By default widgets are stacked vertically as shown in the image below.</p>  <p><img title="verticalLayout" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="verticalLayout" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2013/06/verticalLayout.gif" width="245" height="435" /></p>  <p>Here is another example of an app running in the emulator.</p>  <p><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2013/06/image.png" width="479" height="215" /></p>  <p>To get this layout you can use the following xml</p>  <pre class="prettyprint">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;LinearLayout xmlns:android=&quot;<a href="http://schemas.android.com/apk/res/android&amp;quot;">http://schemas.android.com/apk/res/android&amp;quot;</a></p>

<pre><code>          android:orientation=&amp;quot;vertical&amp;quot;
          android:layout_width=&amp;quot;fill_parent&amp;quot;
          android:layout_height=&amp;quot;fill_parent&amp;quot;&amp;gt;
&amp;lt;TextView
        android:layout_width=&amp;quot;fill_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;Hello World, MyActivity&amp;quot;
        /&amp;gt;
&amp;lt;TextView
        android:layout_width=&amp;quot;fill_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;New Text&amp;quot;
        android:id=&amp;quot;@+id/textView&amp;quot; android:layout_gravity=&amp;quot;center&amp;quot;/&amp;gt;
&amp;lt;Button
        android:layout_width=&amp;quot;fill_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;New Button&amp;quot;
        android:id=&amp;quot;@+id/button&amp;quot; android:layout_gravity=&amp;quot;center&amp;quot;/&amp;gt;
&amp;lt;WebView
        android:layout_width=&amp;quot;fill_parent&amp;quot;
        android:layout_height=&amp;quot;fill_parent&amp;quot;
        android:id=&amp;quot;@+id/webView&amp;quot;/&amp;gt;
</code></pre>

<p>&lt;/LinearLayout&gt;</pre></p>

<p>Other than stacking widgets vertically, LinearLayout can also stack them horizontally. All you need to do is change android:orientation to be horizontal <code>android:orientation=”horizontal”</code></p>




<p>Let’s look at some slightly advance concepts. First one is the fill model. In the code above you will notice that android:layout_width and android:layout_height are either set to fill_parent or wrap_content. These values are very useful when placing widgets in a LinearLayout or for that matter any kind of layout. </p>




<p>I will use this new example to explain few concepts. In this layout I have three TextView objects placed within a LinearLayout. To make them standout I have added some color. Here is the code.</p>




<pre class="prettyprint" >&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:orientation="vertical"
              android:layout_width="fill_parent"
              android:layout_height="fill_parent" &gt;

    &lt;TextView
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:text="Text View 1"
            android:background="#bfffd9"
            android:textColor="#000000"/&gt;

    &lt;TextView
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:text="Text View 2"
            android:background="#ffd4b4"
            android:textColor="#000000"/&gt;

    &lt;TextView
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:text="Text View 3"
            android:background="#a9d2ff"
            android:textColor="#000000"/&gt;
&lt;/LinearLayout&gt;
</pre>


<p></p>

<p>The view rendered by the code above will be</p>




<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2013/06/image1.png" width="240" height="320" /></p>




<p>Let’s play a bit with the height property. I will set android:LayoutHeight of second TextView to be fill_parent. Doing so results in this</p>




<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2013/06/image2.png" width="240" height="320" /></p>




<p>What happened to the third TextView? Where did it go? Technically it is still there but you cannot see it. The way this works is that the layout system places TextView 1, it then puts the second TextView if there is space available and then the third one if there is space available. Because the second TextView has taken up the remaing space, there is no space left for third TextView. </p>




<p>What if I change Layout_Height of second TextView to wrap_content and for the third TextView make it fill_parent. Here is the full code.</p>




<pre class="prettyprint" >&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:orientation="vertical"
              android:layout_width="fill_parent"
              android:layout_height="fill_parent" &gt;

    &lt;TextView
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:text="Text View 1"
            android:background="#bfffd9"
            android:textColor="#000000"/&gt;

    &lt;TextView
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:text="Text View 2"
            android:background="#ffd4b4"
            android:textColor="#000000"/&gt;

    &lt;TextView
            android:layout_width="fill_parent"
            android:layout_height="fill_parent"
            android:text="Text View 3"
            android:background="#a9d2ff"
            android:textColor="#000000"/&gt;
&lt;/LinearLayout&gt;
</pre>


<p></p>

<p>This will give us</p>




<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2013/06/image3.png" width="240" height="320" /></p>




<p>There is another important concept when it comes to placing widgets and that is “Weight”. Let’s look at the effect of weight on our TextViews. By default all widgets placed inside LinearLayout have the same weight i.e. zero. Let’s see what happens if we increase the weight of our first TextView to be 1.</p>




<pre class="prettyprint" >&lt;TextView
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:text="Text View 1"
            android:background="#bfffd9"
            android:textColor="#000000"
            android:layout_weight="1" /&gt;</pre>




<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2013/06/image4.png" width="240" height="320" /></p>




<p>See how first TextView has pushed the other two down. One way to look at this is that first TextView is heavier (we are talking about weight here) than the other two and so takes up more room.</p>




<p>What if we assign the same value for layout_weight to all our TextViews.</p>




<pre class="prettyprint" >&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:orientation="vertical"
              android:layout_width="fill_parent"
              android:layout_height="fill_parent" &gt;

    &lt;TextView
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:text="Text View 1"
            android:background="#bfffd9"
            android:textColor="#000000"
            android:layout_weight="1"
            /&gt;

    &lt;TextView
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:text="Text View 2"
            android:background="#ffd4b4"
            android:textColor="#000000"
            android:layout_weight="1"/&gt;

    &lt;TextView
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:text="Text View 3"
            android:background="#a9d2ff"
            android:textColor="#000000"
            android:layout_weight="1"/&gt;
&lt;/LinearLayout&gt;
</pre>


<p></p>

<p>We get this</p>




<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2013/06/image5.png" width="240" height="320" /></p>




<p>All three TextViews have the same height. Do you see the power of layout_weight here? One more example where we want the first and second TextView to take up half of the space combined and let the third one take the other half. This can be done by setting the layout_weight of our third TextView to be 2.</p>




<pre class="prettyprint" >&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:orientation="vertical"
              android:layout_width="fill_parent"
              android:layout_height="fill_parent" &gt;

    &lt;TextView
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:text="Text View 1"
            android:background="#bfffd9"
            android:textColor="#000000"
            android:layout_weight="1"
            /&gt;

    &lt;TextView
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:text="Text View 2"
            android:background="#ffd4b4"
            android:textColor="#000000"
            android:layout_weight="1"/&gt;

    &lt;TextView
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:text="Text View 3"
            android:background="#a9d2ff"
            android:textColor="#000000"
            android:layout_weight="2"/&gt;
&lt;/LinearLayout&gt;
</pre>


<p></p>

<p><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2013/06/image6.png" width="240" height="320" /></p>




<p>Other than layout_width, layout_height and layout_weight, there are many other attributes available which have significant affect on widget’s placement within a layout container. I will leave them for another day. </p>

]]></content>
  </entry>
  
</feed>
