<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Debug Release]]></title>
  <link href="http://www.debugrelease.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://www.debugrelease.com/"/>
  <updated>2013-08-31T15:03:55+10:00</updated>
  <id>http://www.debugrelease.com/</id>
  <author>
    <name><![CDATA[Deepak Kapoor]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Free Python Books]]></title>
    <link href="http://www.debugrelease.com/2013/03/25/free-python-books/"/>
    <updated>2013-03-25T00:00:00+11:00</updated>
    <id>http://www.debugrelease.com/2013/03/25/free-python-books</id>
    <content type="html"><![CDATA[<p>Found a great collection of Python books available for free. Sharing it with readers of Therefore Systems. Screenshot below is just a small sample. </p>


<p> <p><a href="http://pythonbooks.revolunet.com/"><img title="Free Python Books" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="Free Python Books" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2013/03/image2.png" width="640" height="532"></a></p> <p><a href="http://pythonbooks.revolunet.com/">Link</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize Response Headers in Django]]></title>
    <link href="http://www.debugrelease.com/2012/03/26/customize-response-headers-in-django/"/>
    <updated>2012-03-26T00:00:00+11:00</updated>
    <id>http://www.debugrelease.com/2012/03/26/customize-response-headers-in-django</id>
    <content type="html"><![CDATA[<p>Django makes it as easy as it can be to work with Response Headers. These headers in case you did not know are sent to the browser along with the response to a request. You can customize values for existing headers and also add new headers. In this example we will look at how easily it is done in Django. </p>


<p> <p>We will use a simple example of a page which displays current server date and time. The output of the page does not matter for this example because we are focusing on Response Headers here. Our example page is served by this view:</p></p>

<pre class="lang:python decode:true " >
def current_datetime(request):
    now = datetime.datetime.now()
    t = get_template('current_datetime.html')
    c = Context({'current_date': now})
    r = HttpResponse(t.render(c))
    return r
</pre>


<p></p>

<p>By default Django will send <strong>Content-Type</strong>, <strong>Date</strong> and <strong>Server</strong> response headers to the browser as seen in the screenshot below. </p>


<p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Default Response Headers from Django" border="0" alt="Default Response Headers from Django" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2012/03/image1.png" width="644" height="370"></p>


<p>Let’s say that we want to modify the value for Server header. You know, to feel the false satisfaction of making it hard for hackers to find out the technology stack used by our website. Besides the sarcasm, it can be done by modifying our view like this:</p>




<pre class="lang:python decode:true " >def current_datetime(request):
    now = datetime.datetime.now()
    t = get_template('current_datetime.html')
    c = Context({'current_date': now})
    r = HttpResponse(t.render(c))
    r['Server'] = 'Served by 3cpo'
    return r
</pre>




<p>Each view in Django returns a HttpResponse and we can work with it as we would work with a dictionary. We can see that the value for Server response header has been changed to ‘Served by 3cpo’.</p>


<p><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="Server Header Served by Django" border="0" alt="Server Header Served by Django" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2012/03/image2.png" width="638" height="362"></p>


<p>Adding a new header is also simple. It is done by adding a new element to HttpResponse we send back. As shown here.</p>




<pre class="lang:python decode:true " >def current_datetime(request):
    now = datetime.datetime.now()
    t = get_template('current_datetime.html')
    c = Context({'current_date': now})
    r = HttpResponse(t.render(c))
    r['Server'] = 'Served by 3cpo'
    r['x-powered-by'] = 'my Linux server'
    return r
</pre>




<p>We have just included a new response header ‘x-powered-by’ which is set to ‘my Linux server’.</p>


<p><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="Adding new Response Header in Django" border="0" alt="Adding new Response Header in Django" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2012/03/image7.png" width="641" height="373"></p>


<p>Simple enough, right? Well, this is what I like about Django and its batteries included approach.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beautiful Python: Working With English Alphabets]]></title>
    <link href="http://www.debugrelease.com/2012/03/21/beautiful-python-working-with-english-alphabets/"/>
    <updated>2012-03-21T00:00:00+11:00</updated>
    <id>http://www.debugrelease.com/2012/03/21/beautiful-python-working-with-english-alphabets</id>
    <content type="html"><![CDATA[<p>Yesterday while working on my website I came across a need to display links which start with alphabets from A – Z. Now there are many ways to skin a cat and one of them is to create an array and fill it with 26 elements, each representing an alphabet. Something like a[0] = ‘A’, a[1] = ‘B’ and so on. But that is not Pythonic. This is:</p>


<p>First step is to get all alphabets in English language</p>


<pre class="prettyprint lang-python">
>>> import string
>>> alphas = string.ascii_lowercase
>>> alphas
‘abcdefghijklmnopqrstuvwxyz’
>>>
</pre>


<p>Great! But I’d like to have them as a list so that I produce links for each element or do something else with them.</p>


<pre class="prettyprint lang-python">
>>> import string
>>> alphas = string.ascii_lowercase
>>> alphas
‘abcdefghijklmnopqrstuvwxyz’
>>> list_of_alphas = list(alphas)
>>> list_of_alphas
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',
'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
>>>
</pre>


<p>This looks good. How about making them all upper case? Easy enough.</p>


<pre class="prettyprint lang-python">
>>> import string
>>> alphas = string.swapcase(string.ascii_lowercase)
>>> list_of_alphas = list(alphas)
>>> list_of_alphas
['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
>>>
</pre>


<p>I think this is pretty cool. </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Zen Of Python]]></title>
    <link href="http://www.debugrelease.com/2012/03/20/the-zen-of-python/"/>
    <updated>2012-03-20T00:00:00+11:00</updated>
    <id>http://www.debugrelease.com/2012/03/20/the-zen-of-python</id>
    <content type="html"><![CDATA[<p>These days I am doing a great amount of work using Python. If you are game to learn a new language then I highly recommend looking at Python. You will find it both <a href="http://onstartups.com/tabid/3339/bid/20493/Why-PHP-Is-Fun-and-Easy-But-Python-Is-Marriage-Material.aspx">fun and productive</a>. Basic tenets of the language can be summarized in what is called “The Zen of Python”.</p>


<p> <p>The Zen of Python, by Tim Peters</p> <ul> <li>Beautiful is better than ugly.</li> <li>Explicit is better than implicit.</li> <li>Simple is better than complex.</li> <li>Complex is better than complicated.</li> <li>Flat is better than nested.</li> <li>Sparse is better than dense.</li> <li>Readability counts.</li> <li>Special cases aren&rsquo;t special enough to break the rules.</li> <li>Although practicality beats purity.</li> <li>Errors should never pass silently.</li> <li>Unless explicitly silenced.</li> <li>In the face of ambiguity, refuse the temptation to guess.</li> <li>There should be one&mdash; and preferably only one &mdash;obvious way to do it.</li> <li>Although that way may not be obvious at first unless you&rsquo;re Dutch.</li> <li>Now is better than never.</li> <li>Although never is often better than <em>right</em> now.</li> <li>If the implementation is hard to explain, it&rsquo;s a bad idea.</li> <li>If the implementation is easy to explain, it may be a good idea.</li> <li>Namespaces are one honking great idea &mdash; let&rsquo;s do more of those!</li></ul> <p>Where did I get this from? Well, from Python itself. Just type <font style="background-color: #cccccc" color="#0000ff">&nbsp; import this&nbsp; </font> on Python prompt.</p></p>
]]></content>
  </entry>
  
</feed>
