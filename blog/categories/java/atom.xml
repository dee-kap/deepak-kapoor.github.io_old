<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Debug > Release >]]></title>
  <link href="http://deepak-kapoor.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://deepak-kapoor.github.io/"/>
  <updated>2013-08-07T18:39:58+10:00</updated>
  <id>http://deepak-kapoor.github.io/</id>
  <author>
    <name><![CDATA[Deepak Kapoor]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Yet Another Hadoop Word Count Tutorial]]></title>
    <link href="http://deepak-kapoor.github.io/2012/07/10/yet-another-hadoop-word-count-tutorial/"/>
    <updated>2012-07-10T00:00:00+10:00</updated>
    <id>http://deepak-kapoor.github.io/2012/07/10/yet-another-hadoop-word-count-tutorial</id>
    <content type="html"><![CDATA[<p>Here is another Word Count count Hadoop tutorial. Why? You ask. It is a learning exercise for me. I am writing it out so that I can refer to it in future. Also, rather than just copying the example already available with Hadoop installation, I will try to fix some shortcomings of the word count program. Before I do that, let’s just write a stock-standard one. </p>


<p> <p>For this walkthrough if you want to call it that, I have Hadoop running on a single node setup on Ubuntu 11.10. My preferred IDE is Netbeans.</p> <p>Here it goes.</p> <h3>Create a project</h3> <p>First of all create a Java project in Netbeans. Call it HadoopWordCountTutorial. I also like to use proper package names so my class HadoopWordCountTutorial is in package com.thereforesystems.hadoop.</p> <p><img style="background-image: none; border-right-width: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.debugrelease.com/wp-content/uploads/2012/07/image.png" width="640" height="398"></p> <p>&nbsp;</p> <h3>Add Libraries</h3> <p>Next thing we need to do is add some libraries. Here is a list of libraries required to compile our Hadoop project.</p> <p><img style="background-image: none; border-right-width: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.debugrelease.com/wp-content/uploads/2012/07/image1.png" width="459" height="261"></p> <p>These jars can be found in your Hadoop folders. An easy way to find where things are is by using locate command. For example to locate hadoop-core-0.20.2-cdh3u4.jar execute the command in terminal.</p> <p><font color="#0000ff">locate hadoop-core-0.20.2-cdh3u4.jar</font></p> <p>On my machine the file is located in </p> <p>/usr/lib/hadoop-0.20/</p> <p>Once we have added required libraries, we are all set to write some code. </p> <h3>Writing code</h3> <p>Hadoop is a framework which provides us plumbing to write MapReduce operations (This is such an understatement). Here is a <a href="http://code.google.com/edu/parallel/mapreduce-tutorial.html">good tutorial on MapReduce</a>. If you are not familiar with MapReduce then I suggest that you read it before continuing with this tutorial. </p> <p>There are two operations we will write. One is the mapper and the other is reducer. Our objective is to count words in a file or many files and write the results to an output location. We will start with our mapper.</p> <h3>Mapper</h3> <p>Mapper in Hadoop is implemented by extending Mapper class found in org.apache.hadoop.mapreduce. This class implements a map method in which we will write our logic. Here is the code for our class.</p></p>

<pre class="lang:java decode:true " >
public static class WordCountMapper extends Mapper<Object /* KEYIN */, 
            Text /* VALUEIN */, 
            Text /* KEYOUT */, 
            IntWritable /* VALUEOUT */> {

    private Text word = new Text();
    private final static IntWritable numberOne = new IntWritable(1);

    public void map(Object key, Text value, Context context) 
        throws IOException, InterruptedException {

        StringTokenizer tokenizer = new StringTokenizer(value.toString());
        while (tokenizer.hasMoreTokens()) {
            word.set(tokenizer.nextToken());
            context.write(word, numberOne);
             
        }
    }
}
</pre>




<p>Let’s look at the map method. The map method tokenizes the text passed in. What gets passed in is handled by Hadoop. Keep in mind that text for the entire file may not be passed in to the mapper. And this is a good thing. Imagine if the file was many gigabytes in size, Hadoop will take care of splitting the file into blocks and will spin off <em>n</em> number of mappers to handle the chunked file.</p>


<p> <h3>Reducer</h3> <p>The reducer is implemented in a class which extends Reducer. Here is the code for Reducer.</p></p>

<pre class="lang:java decode:true " >
public static class WordCountReducer extends Reducer<Text /* KEYIN */, 
            IntWritable /* VALUEIN */, 
            Text /* KEYOUT */, 
            IntWritable /* VALUEOUT */> {
        
    public void reduce(Text key, Iterable<IntWritable> values, Context context) 
        throws IOException, InterruptedException {
        
        int sum = 0;
        for(IntWritable val : values){
            sum += val.get();
        }
            
        context.write(key, new IntWritable(sum));
    }
}
</pre>




<p>The method of interest here is reduce() which receives a list of IntWritable objects for a key. In our example a key will be a word. For example the word could be “Imagine” which occurs many times in our file. After Mapper is done, Reducer will be called for key “Imagine” and values [1, 2, 1, 1]. Within our reduce method we sum the values up for each key and write it out. Writing out part is handled by the Context for us.</p>


<p> <h3>Main method</h3> <p>Main method is where it all get’s tied up. Let’s look at the main method.</p></p>

<pre class="lang:java decode:true " >
public static void main(String[] args) 
    throws IOException, InterruptedException, ClassNotFoundException {
        
    Configuration config = new Configuration();
    String[] otherArgs = new GenericOptionsParser(config, args).getRemainingArgs();
        
    Job job = new Job(config, "Word Count Tutorial");
    job.setJarByClass(HadoopWordCountTutorial.class);
    job.setMapperClass(WordCountMapper.class);
    job.setReducerClass(WordCountReducer.class);
        
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
        
    FileInputFormat.addInputPath(job, new Path(otherArgs[0]));
    FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));
        
    System.exit(job.waitForCompletion(true) ? 0 : 1);
}
</pre>




<p>The first thing we do is create an instance of Configuration object. This returns us the default configuration for our installation.&nbsp; Next we parse arguments passed in. These arguments for the purpose of this example are input-directory and output-directory. Note that Hadoop will create output directory for us and it should not already exist.</p>


<p> <p>We then create an instance of Job object by passing in the configuration instance and a name for our job. Next three lines tell Hadoop about our Jar file, the mapper it should use and the reducer it should use for the job.</p> <p>After this we call setOutputKeyClass and setOutputValueClass on the job instance. This tells Hadoop about data types we expect it to deal with.</p> <p>Finally we set the locations for input directory and output directory. </p> <h3>Running the job</h3><p>We are all set to run this job. I executed this job by pointing it to a directory which contains only one file. This file is lyrics for Imagine by John Lennon. </p></p>

<p>On my machine I executed the job with this command.</p>


<p><font color="#0000ff">java -jar /home/deepak/NetBeansProjects/HadoopWordCountTutorial/dist/HadoopWordCountTutorial.jar /home/deepak/temp/HadoopWordCountTutorial/input /home/deepak/temp/HadoopWordCountTutorial/output</font></p>




<p>After the job is run, the output shows me how many times a particular word occured in the file. Here is partial output.</p>


<p> <p><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.debugrelease.com/wp-content/uploads/2012/07/image2.png" width="134" height="460"></p> <p>What is wrong with this output? Take a look at the partial output above, you will notice that “A” has been counted as 1 and “a” is counted as 2. To resolve this issue we can tell our StringTokenizer to ignore certain characters.</p></p>

<pre class="lang:java decode:true " >
StringTokenizer tokenizer = 
    new StringTokenizer(value.toString(), " tnrf,.:;?[]'(),~!@#%^&*()_");
</pre>




<p>Also when we all word.set we can call toLowerCase method. This will make all our keys lowercase and provide expected ouput.</p>


<p></p>

<pre class="lang:java decode:true " >
word.set(tokenizer.nextToken().toLowerCase());
</pre>




<p>Here is the output after making two minor changes. We now have the count for “a” as 3. This is what we expected.</p>


<p> <p><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.debugrelease.com/wp-content/uploads/2012/07/image3.png" width="127" height="310"></p> <p>&nbsp;</p> <h3>Conclusion</h3> <p>This concludes the post. I hope you learned a thing or two here. These days I am spending more and more time with Hadoop and most importantly I am enjoying my time with it. Stay tuned for more ramblings as I make my way through this massive framework.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Complex Event Processing with Esper–Tutorial For Beginners]]></title>
    <link href="http://deepak-kapoor.github.io/2012/06/14/complex-event-processing-with-esper-tutorial-for-beginners/"/>
    <updated>2012-06-14T00:00:00+10:00</updated>
    <id>http://deepak-kapoor.github.io/2012/06/14/complex-event-processing-with-esper-tutorial-for-beginners</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>


<p> <p>This is a tutorial for beginners who are interested in CEP (Complex Event Processing) using Esper. We will build a fictional real-time surveillance system which alerts on conditions we will define. You will learn how to use Esper to process real-time events and you may also learn a thing or two about sockets in Java. </p> <p>&nbsp;</p> <h3>The Story</h3> <p>Boys at the station have been tipped off regarding some illegal activities at The Genco Pura Olive Oil Company. They suspect that some illegal cargo is about to move through the company. In order to bust the gig they have come out with a plan to monitor phone calls to and from certain phone numbers. They have identified phone numbers used by Vito and Tom and they’d like to know when they make a call or they receive a call. The scenario can be expanded to record their conversations but that would require a court’s approval and it’s just too much work for a Esper tutorial.</p> <p>&nbsp;</p> <h3>Tools of Trade</h3> <p>This tutorial is about Esper which should be downloaded and extracted to an accessible location.</p> <p>Language of choice is Java so it’s <a href="http://esper.codehaus.org/">Esper</a> for Java we are after.</p> <p>Phone numbers are fictitious and taken from this site. <a title="http://www.acma.gov.au/WEB/STANDARD..PC/pc=PC_2330" href="http://www.acma.gov.au/WEB/STANDARD..PC/pc=PC_2330"><a href="http://www.acma.gov.au/WEB/STANDARD..PC/pc=PC_2330">http://www.acma.gov.au/WEB/STANDARD..PC/pc=PC_2330</a></a></p> <p>Vito’s number is: 1800 160 401. Yes he has a 1800 number. He does not mind paying when other people call him.</p> <p>Tom’s number is: 0491 570 110</p> <p>IDE: I use Netbeans but it doesn’t really matter. Any IDE or text editor of choice will do.</p> <p>&nbsp;</p> <h3>Design</h3> <p>Our bust the bad guys solution relies on a server component which sends messages about calls being made. These messages are received by a client application which feeds them into Esper engine. Esper then looks at these messages and based on instructions given to it, alerts the user. Alert mechanism is simply displaying attention grabbing text on console. This is a CEP and Esper tutorial remember? Do not get carried away. </p> <p>Below is a pictorial representation of the design.</p> <p><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.debugrelease.com/wp-content/uploads/2012/06/image.png" width="488" height="786"></p> <p>&nbsp;</p> <h3>The Message</h3> <p>The server sends a message to the client whenever a call is made. This message is then received by client. We can express our message as a POJO which are supported by Esper. The message object maintains information about from and to phone numbers, time of call and duration of call. For this tutorial we are only interested in the phone numbers. </p></p>

<pre class="lang:c# decode:true " >
package com.thereforesystems.cdrlibrary;

import java.io.Serializable;
import java.util.Date;

public class CallDataRecord implements Serializable{

    String fromNumber;
    String toNumber;
    Date callDateTime;
    int duration;

    public Date getCallDateTime() {
        return callDateTime;
    }

    public String getFromNumber() {
        return fromNumber;
    }

    public String getToNumber() {
        return toNumber;
    }

    public int getDuration() {
        return duration;
    }

    public CallDataRecord(String from, String to, Date time, int dur) {

        fromNumber = from;
        toNumber = to;
        callDateTime = time;
        duration = dur;
    }

    @Override
    public String toString() {
        return "From : " + fromNumber + " To: " + toNumber;
    }
}
</pre>




<h3>Server</h3>


<p> <p>The server application accepts socket connections on a port and then starts sending messages to the connected client. It maintains a list of phone numbers and simulates call data records also known as CDR in telco lingo.&nbsp; This is a stock standard sockets server which has nothing to do with Esper.</p></p>

<pre class="lang:c# decode:true " >
package com.thereforesystems.cdrserver;

import com.thereforesystems.cdrlibrary.CallDataRecord;
import java.io.*;
import java.net.*;
import java.util.Calendar;
import java.util.Random;

public class CDRServer {

    String phoneNumbers[] = {"0491 570 156",
        "0491 570 157",
        "0491 570 158",
        "0491 570 159",
        "0491 570 110",
        "1800 160 401",
        "1800 975 707",
        "1800 975 708",
        "1800 975 709",
        "1800 975 710",
        "1800 975 711",
        "1300 975 707",
        "1300 975 708",
        "1300 975 709",
        "1300 975 710",
        "1300 975 711"};
    
    ServerSocket providerSocket;
    Socket connection = null;
    ObjectOutputStream out;
    String message;
    private static Random generator = new Random();

    void run() {
        try {
            providerSocket = new ServerSocket(9999, 10);
            System.out.println("Waiting for connection to CDR Server");
            connection = providerSocket.accept();
            System.out.println("Connection received from " + 
                    connection.getInetAddress().getHostName());
            out = new ObjectOutputStream(connection.getOutputStream());
            out.flush();

            String from;
            String to;
            int duration;
            while (true) {

                if (connection.isConnected()) {
                    from = phoneNumbers[generator.nextInt(phoneNumbers.length - 1)];
                    to = phoneNumbers[generator.nextInt(phoneNumbers.length - 1)];
                    if (!from.equals(to)) { // no need to send when from and to are same numbers
                        duration = generator.nextInt(10);
                        Calendar calendar = Calendar.getInstance();
                        CallDataRecord cdr = 
                                new CallDataRecord(from, to, calendar.getTime(), duration);
                        sendMessage(cdr);
                    }
                } else {
                    break;
                }

            }

        } catch (IOException ioException) {
            ioException.printStackTrace();
        } finally {
            try {
                out.close();
                connection.close();
                providerSocket.close();
            } catch (IOException ioException) {
                ioException.printStackTrace();
            }
        }
    }

    void sendMessage(CallDataRecord cdr) {
        try {
            out.writeObject(cdr);
            out.flush();
            System.out.println("Sending CDR: " + cdr);
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }

    public static void main(String[] args) {
        CDRServer server = new CDRServer();
        while (true) {
            server.run();
        }
    }
}
</pre>




<h3>Client</h3>


<p>Client application is where interesting stuff happens. By establishing a socket connection it receives a message for each call from server. 
</p>




<pre class="lang:c# decode:true " >
requestSocket = new Socket("localhost", 9999);
System.out.println("Connected to localhost in port 9999");
in = new ObjectInputStream(requestSocket.getInputStream());

while (true) {
    try {
        cdr = (CallDataRecord) in.readObject();
        runtime.sendEvent(cdr);
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(CallDetector.class.getName())
            .log(Level.SEVERE, null, ex);
    }
}
</pre>




<p>You can see in the code above that an instance of CallDataRecord class is created from data in ObjectInputStream. A call is made to sendEvent method of EPRuntime object and retrieved CallDataRecord is sent as an argument. How is this data handled by Esper? We have two classes which are Esper listeners and they are ready to act when invoked. We have one listener for calls made “from” and another for calls made “to”. For a class to act as a listener in Esper it must implement UpdateListener interface.</p>


<p></p>

<pre class="lang:c# decode:true " >
public static class FromListener implements UpdateListener {

    @Override
    public void update(EventBean[] newData, EventBean[] oldData) {
        System.out.println("Bad guy made a call: " + newData[0].getUnderlying());
    }
}
    
public static class ToListener implements UpdateListener {

    @Override
    public void update(EventBean[] newData, EventBean[] oldData) {
        System.out.println("Bad guy received a call: " + newData[0].getUnderlying());
    }
}
</pre>




<p>So what invokes a particular listener? This is handled by Esper when we register a listener to a particular EPL statement. An EPL statement is like a SQL query with the familiar Select * from syntax. This is our EPL statement for “from” calls. Note that after creating an instance of EPStatement class we register the appropriate listener.</p>


<p></p>

<pre class="lang:c# decode:true " >
EPStatement eplFrom = 
        admin.createEPL("select * from CDR(fromNumber='1800 160 401' "
                + "or fromNumber='0491 570 110')");
eplFrom.addListener(new FromListener());
        
EPStatement eplTo = 
        admin.createEPL("select * from CDR(toNumber='1800 160 401' "
                + "or toNumber='0491 570 110')");
eplTo.addListener(new ToListener());
</pre>




<p>For it to all work there is a little more setup required. Let’s go through it. First of all we need a Configuration object to which we will add an event type. Note that in our EPL statements we are querying from CDR. This CDR is defined as a Event Type in the configuration object.</p>


<p></p>

<pre class="lang:c# decode:true " >
Configuration config = new Configuration();
config.addEventType("CDR", CallDataRecord.class.getName());
</pre>




<p>Next thing we need is a EPRuntime which is the Esper runtime object.</p>


<p></p>

<pre class="lang:c# decode:true " >
EPServiceProvider provider = 
        EPServiceProviderManager.getProvider("CDREngine", config);
EPRuntime runtime = provider.getEPRuntime();
</pre>




<p>Finally we run our client and pass it an instance of EPRuntime so that our client can send events to Esper engine.</p>


<p></p>

<pre class="lang:c# decode:true " >
CallDetector client = new CallDetector();
client.run(runtime);
</pre>




<p>Here is the full code for Client application. </p>


<p></p>

<pre class="lang:c# decode:true " >
package com.thereforesystems.calldetector;

import com.espertech.esper.client.*;
import com.thereforesystems.cdrlibrary.CallDataRecord;
import java.io.*;
import java.net.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class CallDetector {

    Socket requestSocket;
    ObjectInputStream in;
    CallDataRecord cdr;

    void run(EPRuntime runtime) {
        try {
            requestSocket = new Socket("localhost", 9999);
            System.out.println("Connected to localhost in port 9999");
            in = new ObjectInputStream(requestSocket.getInputStream());

            while (true) {
                try {
                    cdr = (CallDataRecord) in.readObject();
                    runtime.sendEvent(cdr);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(CallDetector.class.getName())
                            .log(Level.SEVERE, null, ex);
                }
            }

        } catch (UnknownHostException unknownHost) {
            System.err.println("You are trying to connect to an unknown host!");
        } catch (IOException ioException) {
            ioException.printStackTrace();
        } finally {
            try {
                in.close();
                requestSocket.close();
            } catch (IOException ioException) {
                ioException.printStackTrace();
            }
        }
    }

    public static class FromListener implements UpdateListener {

        @Override
        public void update(EventBean[] newData, EventBean[] oldData) {
            System.out.println("Bad guy made a call: " 
                    + newData[0].getUnderlying());
        }
    }

    public static class ToListener implements UpdateListener {

        @Override
        public void update(EventBean[] newData, EventBean[] oldData) {
            System.out.println("Bad guy received a call: " 
                    + newData[0].getUnderlying());
        }
    }

    public static void main(String[] args) {

        Configuration config = new Configuration();
        config.addEventType("CDR", CallDataRecord.class.getName());

        EPServiceProvider provider =
                EPServiceProviderManager.getProvider("CDREngine", config);
        EPRuntime runtime = provider.getEPRuntime();

        EPAdministrator admin = provider.getEPAdministrator();

        EPStatement eplFrom =
                admin.createEPL("select * from CDR(fromNumber='1800 160 401' "
                + "or fromNumber='0491 570 110')");
        eplFrom.addListener(new FromListener());

        EPStatement eplTo =
                admin.createEPL("select * from CDR(toNumber='1800 160 401' "
                + "or toNumber='0491 570 110')");
        eplTo.addListener(new ToListener());

        CallDetector client = new CallDetector();
        client.run(runtime);
    }
}
</pre>




<p>For the client to build we need to reference following libraries.</p>


<p> <p><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="Esper Libraries " border="0" alt="Esper Libraries " src="http://www.debugrelease.com/wp-content/uploads/2012/06/image1.png" width="249" height="143"></p> <p>These jars can be found in the root esper folder and root esper/esper/lib folders. </p></p>

<p>&nbsp;</p>


<h3>Output</h3>


<p> <p>After running Server and Client for few seconds we can see that Esper is notifying us of calls made to or from Vito or Tom’s mobile. Watch out guys. </p> <p><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="Esper Output" border="0" alt="Esper Output" src="http://www.debugrelease.com/wp-content/uploads/2012/06/image2.png" width="512" height="215"></p></p>

<p>&nbsp;</p>


<h3>Conclusion</h3>


<p> <p>In this tutorial we saw how simple it is to create an application which can process events in real-time. Real power of Esper is the raw speed by which it can do complex real-time processing. Esper is also simple to understand and work with. There is a lot more to Esper than this simple tutorial. Maybe I will write a bit more in future posts. </p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Axis2 Plugin for Netbeans 7.1.2]]></title>
    <link href="http://deepak-kapoor.github.io/2012/05/25/axis2-plugin-for-netbeans-7-1-2/"/>
    <updated>2012-05-25T00:00:00+10:00</updated>
    <id>http://deepak-kapoor.github.io/2012/05/25/axis2-plugin-for-netbeans-7-1-2</id>
    <content type="html"><![CDATA[<p>I upgraded Netbeans today and found that there is no Axis2 plugin available via Tools –&gt; Plugins. Looks like Axis2 support plugin has been discontinued in Netbeans. However the link below works and I was able to install the plugin. This post hopefully will serve as a bookmark when I’m looking for Axis2 plugin in Netbeans next time.</p>


<p> <p><a title="http://deadlock.netbeans.org/hudson/job/nbms-and-javadoc/lastStableBuild/artifact/nbbuild/nbms/updates.xml.gz" href="http://deadlock.netbeans.org/hudson/job/nbms-and-javadoc/lastStableBuild/artifact/nbbuild/nbms/updates.xml.gz"><a href="http://deadlock.netbeans.org/hudson/job/nbms-and-javadoc/lastStableBuild/artifact/nbbuild/nbms/updates.xml.gz">http://deadlock.netbeans.org/hudson/job/nbms-and-javadoc/lastStableBuild/artifact/nbbuild/nbms/updates.xml.gz</a></a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Javadoc to Netbeans]]></title>
    <link href="http://deepak-kapoor.github.io/2011/01/01/add-javadoc-to-netbeans/"/>
    <updated>2011-01-01T00:00:00+11:00</updated>
    <id>http://deepak-kapoor.github.io/2011/01/01/add-javadoc-to-netbeans</id>
    <content type="html"><![CDATA[<p>I installed Netbeans 6.9 on my machine and found that Javadoc is not installed. For example when invoking intellisense for a method in Calendar class I get the following message. </p>


<p><img src="http://www.debugrelease.com/wp-content/uploads/2011/01/snapshot3.png" title="Javadoc" alt="Javadoc not available" /></p>


<p>Javadoc is not installed with Netbeans by default but can easily be installed. This is how it's done.</p>


<p>First download documentation from this <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" title="Javadoc download link" target="_blank">link</a>. Get the documentation zip file and copy it to a folder. Next go to Tools --&gt; Java Platforms in Netbeans. This brings up Java Platform Manager. On this screen select the environment e.g. JDk 1.6 and then click on Javadoc tab. Browse to the zip file and click close on Java Platform Manager.</p>


<p><img src="http://www.debugrelease.com/wp-content/uploads/2011/01/snapshot5copy.png" title="Netbeans-Java Platforms Manager" alt="Netbeans-Java Platforms Manager" /></p>


<p>Javadoc will now be available.</p>


<p><img src="http://www.debugrelease.com/wp-content/uploads/2011/01/snapshot4.png" /></p>


<p></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compress File With GZip In Java]]></title>
    <link href="http://deepak-kapoor.github.io/2010/12/17/compress-file-with-gzip-in-java-2/"/>
    <updated>2010-12-17T00:00:00+11:00</updated>
    <id>http://deepak-kapoor.github.io/2010/12/17/compress-file-with-gzip-in-java-2</id>
    <content type="html"><![CDATA[<p style="clear: both;">This example show you how to apply gzip compression to a file in Java.</p>


<p style="clear: both;">Java supports both Zip and GZip compression out of the box. You do not need any third party components.</p>




<pre class="lang:java decode:true " >
import java.io.*;
import java.util.zip.*;

public class GzipCompressor
{

  public void Compress(String inputFile, String outputFile)
  {
    try
    {
      BufferedReader reader =
        new BufferedReader(new FileReader(inputFile));

      BufferedOutputStream output =
        new BufferedOutputStream(new GZIPOutputStream(new FileOutputStream(outputFile)));

      int b;
      while((b =reader.read()) != -1)
      {
        output.write(b);
      }

      reader.close();
      output.close();
    }
    catch(IOException e)
    {
      System.out.println(e.getMessage());
    }
  }
}
</pre>

]]></content>
  </entry>
  
</feed>
