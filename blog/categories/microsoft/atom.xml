<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Microsoft | Deepak Kapoor]]></title>
  <link href="http://www.deepakkapoor.net/blog/categories/microsoft/atom.xml" rel="self"/>
  <link href="http://www.deepakkapoor.net/"/>
  <updated>2013-12-23T22:40:50+11:00</updated>
  <id>http://www.deepakkapoor.net/</id>
  <author>
    <name><![CDATA[Deepak Kapoor]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Find homepage on Internet Explorer]]></title>
    <link href="http://www.deepakkapoor.net/2013/05/26/find-homepage-on-internet-explorer/"/>
    <updated>2013-05-26T00:00:00+10:00</updated>
    <id>http://www.deepakkapoor.net/2013/05/26/find-homepage-on-internet-explorer</id>
    <content type="html"><![CDATA[<p>When I visit google.com in Internet Explorer, Google is able to detect my homepage. I thought this was not possible but seems like it is as google is doing it. It turns out that there is a <strong>isHomePage</strong> method which only works on Internet Explorer and it can be used to find a user’s home page. </p>


<p>  <p><a href="http://samples.msdn.microsoft.com/workshop/samples/author/behaviors/homepage1.htm">This link</a> explains it all. </p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unable to access IIS Metabase on Windows 8]]></title>
    <link href="http://www.deepakkapoor.net/2013/03/14/unable-to-access-iis-metabase-on-windows-8/"/>
    <updated>2013-03-14T00:00:00+11:00</updated>
    <id>http://www.deepakkapoor.net/2013/03/14/unable-to-access-iis-metabase-on-windows-8</id>
    <content type="html"><![CDATA[<p>After installing Windows 8, I found that my ASP.NET MVC projects won’t open in Visual Studio. This is the error thrown by Visual Studio 2012.</p>


<p> <p><img title="SNAGHTML3d25f90" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="SNAGHTML3d25f90" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2013/03/SNAGHTML3d25f90.png" width="492" height="185"></p> <p>My first reaction was to execute aspnet_regiis –i command. That did not work.</p> <p><img title="SNAGHTML3d4c20a" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="SNAGHTML3d4c20a" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2013/03/SNAGHTML3d4c20a.png" width="677" height="343"></p> <p>This was a WTF moment. It turns out that I should be running Visual Studio 2012 as an administrator. After running Visual Studio 2012 as admin, the error went away and life once again seemed a bit normal.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Visual Studio 2012 as administrator every time]]></title>
    <link href="http://www.deepakkapoor.net/2013/03/14/run-visual-studio-2012-as-administrator-always/"/>
    <updated>2013-03-14T00:00:00+11:00</updated>
    <id>http://www.deepakkapoor.net/2013/03/14/run-visual-studio-2012-as-administrator-always</id>
    <content type="html"><![CDATA[<p>As a developer I spend my life inside Visual Studio. Since I installed Windows 8, I was having trouble opening web projects. Turns out that I need to run Visual Studio as an administrator. </p>


<p> <p>Rather than right clicking the shortcut every time and another click to run as administrator, I found a permanent solution. For the lazy me, it saves two extra clicks. </p> <p>Open properties of the shortcut to Visual Studio 2012, go to Shortcut tab. </p> <p><img title="SNAGHTML3dd4943" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="SNAGHTML3dd4943" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2013/03/SNAGHTML3dd4943.png" width="377" height="516"></p> <p>Click on Advanced and then check Run as administrator checkbox. </p> <p><img title="SNAGHTML3ddcf34" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="SNAGHTML3ddcf34" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2013/03/SNAGHTML3ddcf34.png" width="394" height="301"></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WAT080: Failed to locate the Windows Azure SDK. Please make sure the Windows Azure SDK v1.5 is installed.]]></title>
    <link href="http://www.deepakkapoor.net/2012/02/07/wat080-failed-to-locate-the-windows-azure-sdk-please-make-sure-the-windows-azure-sdk-v1-5-is-installed/"/>
    <updated>2012-02-07T00:00:00+11:00</updated>
    <id>http://www.deepakkapoor.net/2012/02/07/wat080-failed-to-locate-the-windows-azure-sdk-please-make-sure-the-windows-azure-sdk-v1-5-is-installed</id>
    <content type="html"><![CDATA[<p>After installing Windows Azure SDK and Visual Studio tools November 2011, I got this error when compiling an existing Cloud project.</p>


<p>  <p><font color="#c0504d">WAT080: Failed to locate the Windows Azure SDK. Please make sure the Windows Azure SDK v1.5 is installed.</font></p>  <p>This post documents the roller coaster ride I went through to solve the problem. If you are interested in just the solution then here it is:</p>  <p><font color="#008080">Download the bits from <a href="http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=28045">this page</a> and install them manually.</font> </p>  <p>If you are interested in how I got to the solution then read on. </p>  <p>Before anything, let me clarify that I already had an older version of Azure SDK and tools on my machine. I used Web Platform installer to install the latest Azure SDK and Visual Studio Tools i.e. November update. Then a drama started. </p>  <p>The build error I got said that I should make sure that Windows Azure SDK v1.5 is installed. But I already installed v1.6. If the project files were changed between versions of tools then they should have been upgraded to latest version by Visual Studio. This did not happen. My first maneuver was to re-install Visual Studio tools. I downloaded just the standalone installer for tools and tried installing it. I got this error.</p>  <p>&#160;<img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2012/02/image.png" width="485" height="300" /></p>  <p>The log file showed me these errors:</p> <font color="#0000ff" size="1">[16AC:16B0][2012-02-07T07:21:21]: Error 0x80070643: Failed to install MSI package.    <br />[16AC:16B0][2012-02-07T07:21:21]: Error 0x80070643: Failed to execute MSI package.     <br />[1744:1748][2012-02-07T07:21:21]: Error 0x80070643: Failed to configure per-machine MSI package.     <br />[1744:1748][2012-02-07T07:21:21]: Error 0x80070643: Failed to execute MSI package.</font>  <p>&#160;</p>  <p>I was in no mood for looking into the details of errors in the log file. I just wanted to get going with Azure and not worry about installer logs. So I uninstalled the SDK, Authoring Tools and Visual Studio tools to get a clean Azure free environment.</p>  <p><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2012/02/image1.png" width="321" height="51" /></p>  <p>After uninstalling Azure bits I fired up Web Platform Installer and installed Azure SDK and tools. Little did I know that this was not going to work. Here is a screenshot of the errors I got.</p>  <p><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2012/02/image2.png" width="622" height="414" /></p>  <p>By this time I was annoyed (you may substitute “annoyed” with a more colorful word of your choice). Web Platform Installer should just do it, right? It should take care of dependencies, right? Well that was not the case.</p>  <p>By this time I gave up on Web Platform Installer and downloaded standalone Azure bits and decided to install them manually. Here is the download link:</p>  <p><a title="http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=28045" href="http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=28045"><a href="http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;amp;id=28045">http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;amp;id=28045</a></a></p>  <p>I downloaded and installed the ones highlighted below.</p>  <p><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2012/02/image3.png" width="641" height="458" /></p>  <p>After installing Azure Emulator, Libs and SDK, I installed Visual Studio Tools and it installed correctly.</p>  <p><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2012/02/image4.png" width="485" height="300" /></p>  <p>I opened the project which was giving me a build error. Visual Studio asked me to convert it to a newer format. I happily obliged. Finally I saw <font color="#00c100"><strong>Build Succeeded</strong></font>.</p>  <p>Although not a big deal specially after the issue was resolved, I still feel that installer could have done a better job. Anyhow, I’m back in the cloud <img style="border-bottom-style: none; border-right-style: none; border-top-style: none; border-left-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2012/02/wlEmoticon-smile.png" /></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Shortener API For .NET Written In C#]]></title>
    <link href="http://www.deepakkapoor.net/2011/01/15/google-shortener-api-with-dotnet-written-in-c-sharp/"/>
    <updated>2011-01-15T00:00:00+11:00</updated>
    <id>http://www.deepakkapoor.net/2011/01/15/google-shortener-api-with-dotnet-written-in-c-sharp</id>
    <content type="html"><![CDATA[<p><a href="https://code.google.com/p/n-gshortener/"><img style="background-image: none; border-right-width: 0px; margin: 0px 10px 10px; padding-left: 0px; padding-right: 0px; display: inline; float: left; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" align="left" src="https://googledrive.com/host/0B6PDO8HPEQZNZWpTRms0ZWtlaUU/uploads/2011/01/image.png" width="56" height="59" /></a>Google Shortener is a service provided by Google to create short URLs. Google Shortener has been available for some time now but only recently Google released a public API to access this service programmatically. Today I decided to try it out and wrote some C# code to work with the API. I will describe what I did in this post.</p>


<p>  <h3>A bit about the API</h3>  <p>Like other URL shorteners, Google API also takes in a long URL and gives you back a short one. When you click on the short URL, you end up at the same location on web as you did with your original long URL.</p>  <p>The API itself is implemented as a RESTful service and is very simple. You can read the overview and reference for API <a href="http://code.google.com/apis/urlshortener/overview.html">here</a>.</p>  <h3>.NET Wrapper</h3>  <p>I wanted to use the API in my .NET application so I created a wrapper. I have made the source code available at <a href="https://code.google.com/p/n-gshortener/">code.google.com</a>. Feel free to download and play with it.</p>  <p>There are three methods in Google Shortener API:</p>  <ol>   <li>url.insert – Shrinks a Url. </li>    <li>url.get – Returns the long Url for a valid short url. </li>    <li>url.list – Returns a list of Urls shortened by an authenticated user. Analytics data is also returned by this method. </li> </ol>  <p>If you want analytics for your Url then you must invoke the methods by passing in an API key. You can get your API key from <a href="http://code.google.com/apis/console/">Google API Console</a>.</p>  <p>Enough talk. Let me show you the code. The main class in the wrapper is called Shortener which contains two methods: GetShortUrl() and GetLongUrl(). An API key can be passed in to the constructor of Shortener and the API key will be used for all subsequent requests for that instance.</p>

<pre class="lang:c# decode:true " >
public Reply GetShortUrl(string longUrl)
{
  string data = &quot;{&quot;longUrl&quot;:&quot;&quot; + longUrl + &quot;&quot;}&quot;;
  string postUrl = googleShortenerUrl;
  string response = HttpHelper.HttpPOST(postUrl, data);
  return DeserializeJSON(response);
}

public Reply GetLongUrl(string shortUrl)
{
  string getUrl = googleShortenerUrl + &quot;&amp;amp;shortUrl=&quot; + shortUrl;
  string response = HttpHelper.HttpGET(getUrl);
  return DeserializeJSON(response);
}

</pre>


<p>The response received from Google is deserialized into a Reply class.</p>

<pre class="lang:c# decode:true " >
public class Reply
{
  public string kind { get; set; }

  public string id { get; set; }

  public string longUrl { get; set; }

  public string status { get; set; }
}
</pre>


<p>GET and POST are done by using HttpHelper class. <a href="https://code.google.com/p/n-gshortener/">Download</a> the code to see this class.</p>  <h3>Conclusion</h3>  <p>Google Shortener API is as simple as it gets. The API also let’s you retrieve analytics data for URLs. I have created a .NET wrapper for the API and have implemented functionality to get short URLs and long URLs. Next steps for this little project are to implement list method, implement authentication support and make the API a bit more rich by enhancing Reply class to support strongly typed members rather than all strings.</p>  <p>One final time. <a href="https://code.google.com/p/n-gshortener/">Link to code</a>.</p></p>
]]></content>
  </entry>
  
</feed>
